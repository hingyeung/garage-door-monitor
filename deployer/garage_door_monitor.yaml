AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "Garage Door Monitor powered by Raspberry Pi and AWS"
Resources:
  GarageDoorSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: garage-door-alarm-topic

  GarageDoorSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties: 
      PolicyDocument:
        Version: "2008-10-17"
        Id: "garage door sns topic policy"
        Statement:
          - Sid: "allows cloudwatch to publish event"
            Effect: Allow
            Principal:
              Service: cloudwatch.amazonaws.com
            Action: SNS:Publish
            Resource: !Ref GarageDoorSNSTopic
      Topics:
        - !Ref GarageDoorSNSTopic
      
  GarageDoorMonitorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
              - "iot.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: 'GarageDoorMonitorPolicy'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Resource: "*"
                Action:
                  - "cloudwatch:PutMetricData"

  GarageDoorMonitorIoTPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        -
          Effect: "Allow"
          Action:
            - "iot:Connect"
          Resource:
            - !Join
              - ''
              - - 'arn:aws:iot:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':client/${iot:ClientId}'
          Condition:
            Bool:
              iot:Connection.Thing.IsAttached: "true"
        -
          Effect: "Allow"
          Action:
            - "iot:Publish"
          Resource:
            - !Join
              - ''
              - - 'arn:aws:iot:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':topic/'
                - '${iot:Connection.Thing.ThingTypeName}/${iot:Connection.Thing.ThingName}'

  GarageDoorMonitorOpenRule:
    Type: AWS::IoT::TopicRule
    Properties:
      TopicRulePayload:
        Description: 'Garage door monitor reports magnetic reed switch is OPEN (magnetic field not present)'
        # TODO if I had to handle more than one Garage Door Monitor, I would hook this up to a Lambda function,
        # which distribute the events to individual Garage Door Monitor CloudWatch metric.
        # For now, events from any GDM will go to the same CW metric.
        Sql: "SELECT status FROM 'DoorMonitor/#' WHERE status = 0"
        RuleDisabled: 'false'
        Actions:
          -
            CloudwatchMetric:
              MetricName: GarageDoorStatus
              MetricNamespace: Garage
              MetricUnit: None
              # this depends on how the sensor is actually installed
              MetricValue: '1'
              RoleArn:
                Fn::GetAtt:
                  - "GarageDoorMonitorRole"
                  - "Arn"
  GarageDoorMonitorCloseRule:
    Type: AWS::IoT::TopicRule
    Properties:
      TopicRulePayload:
        Description: 'Garage door monitor reports magnetic reed switch is CLOSE (magnetic field present)'
        Sql: "SELECT status FROM 'DoorMonitor/#' WHERE status = 1"
        RuleDisabled: 'false'
        Actions:
          -
            CloudwatchMetric:
              MetricName: GarageDoorStatus
              MetricNamespace: Garage
              MetricUnit: None
              # this depends on how the sensor is actually installed
              MetricValue: '0'
              RoleArn:
                Fn::GetAtt:
                - "GarageDoorMonitorRole"
                - "Arn"
  GarageDoorOpenedFor10MinsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref GarageDoorSNSTopic
      InsufficientDataActions:
        - !Ref GarageDoorSNSTopic
      OKActions:
        - !Ref GarageDoorSNSTopic
      ActionsEnabled: true
      AlarmDescription: 'Garage door has been opened for 10 mins'
      MetricName: 'GarageDoorStatus'
      Namespace: 'Garage'
      Statistic: 'Average'
      Period: 60
      EvaluationPeriods: 10
      Threshold: 1.0
      ComparisonOperator: 'GreaterThanOrEqualToThreshold'
      TreatMissingData: 'missing'

  AlarmSNSToSlackNotificationFuncRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        -
          PolicyName: 'GarageDoorAlarmLambdaPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'ssm:GetParameter*'
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/garage-door-monitor/*'

  AlarmSNSToSlackNotificationFuncLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AlarmSNSToSlackNotificationFunc}
      RetentionInDays: 7

      AlarmSNSToIFTTTNotificationFuncRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Principal:
                  Service:
                    - 'lambda.amazonaws.com'
                Action:
                  - 'sts:AssumeRole'
          ManagedPolicyArns:
            - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
          Policies:
            -
              PolicyName: 'GarageDoorAlarmLambdaPolicy'
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  -
                    Effect: Allow
                    Action:
                      - 'ssm:GetParameter*'
                    Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/garage-door-monitor/*'

  AlarmSNSToSlackNotificationFunc:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AlarmSNSToSlackNotificationFuncRole.Arn
      Handler: alarm-sns-to-slack-notification.handler
      Runtime: python2.7
      # relative to where this template file is
      CodeUri: ../src
      MemorySize: 128
      Timeout: 5
      Events:
        SNS1:
          Type: SNS
          Properties:
            Topic: !Ref GarageDoorSNSTopic

  AlarmSNSToSlackNotificationFuncSNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: Lambda
      Endpoint: !GetAtt AlarmSNSToSlackNotificationFunc.Arn
      TopicArn: !Ref GarageDoorSNSTopic

  AlarmSNSToSlackNotificationFuncInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref AlarmSNSToSlackNotificationFunc
      Principal: sns.amazonaws.com
      SourceArn: !Ref GarageDoorSNSTopic

  AlarmSNSToSlackNotificationFuncLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AlarmSNSToSlackNotificationFunc}
      RetentionInDays: 7

  AlarmSNSToIFTTTNotificationFuncRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        -
          PolicyName: 'GarageDoorAlarmLambdaPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'ssm:GetParameter*'
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/garage-door-monitor/*'

  AlarmSNSToIFTTTNotificationFunc:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AlarmSNSToIFTTTNotificationFuncRole.Arn
      Handler: alarm-sns-to-ifttt-notification.handler
      Runtime: python2.7
      # relative to where this template file is
      CodeUri: ../src
      MemorySize: 128
      Timeout: 5
      Events:
        SNS1:
          Type: SNS
          Properties:
            Topic: !Ref GarageDoorSNSTopic

  AlarmSNSToIFTTTNotificationFuncSNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: Lambda
      Endpoint: !GetAtt AlarmSNSToIFTTTNotificationFunc.Arn
      TopicArn: !Ref GarageDoorSNSTopic

  AlarmSNSToIFTTTNotificationFuncInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref AlarmSNSToIFTTTNotificationFunc
      Principal: sns.amazonaws.com
      SourceArn: !Ref GarageDoorSNSTopic

  AlarmSNSToIFTTTNotificationFuncLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AlarmSNSToIFTTTNotificationFunc}
      RetentionInDays: 7

Outputs:
  GarageDoorMonitorOpenRule:
    Description: 'Rule triggered when garage door monitor reports magnetic reed switch is OPEN'
    Value: !Ref GarageDoorMonitorOpenRule
  GarageDoorMonitorCloseRule:
    Description: 'Rule triggered when garage door monitor reports magnetic reed switch is CLOSE'
    Value: !Ref GarageDoorMonitorCloseRule
  GarageDoorMonitorIoTPolicy:
    Description: 'IoT policy for Garage Door Monitor'
    Value: !Ref GarageDoorMonitorIoTPolicy
